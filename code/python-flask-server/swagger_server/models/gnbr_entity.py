# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GnbrEntity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, synonyms: List[str]=None, entity_type: str=None):  # noqa: E501
        """GnbrEntity - a model defined in Swagger

        :param entity_id: The entity_id of this GnbrEntity.  # noqa: E501
        :type entity_id: str
        :param synonyms: The synonyms of this GnbrEntity.  # noqa: E501
        :type synonyms: List[str]
        :param entity_type: The entity_type of this GnbrEntity.  # noqa: E501
        :type entity_type: str
        """
        self.swagger_types = {
            'entity_id': str,
            'synonyms': List[str],
            'entity_type': str
        }

        self.attribute_map = {
            'entity_id': 'entityID',
            'synonyms': 'synonyms',
            'entity_type': 'entityType'
        }

        self._entity_id = entity_id
        self._synonyms = synonyms
        self._entity_type = entity_type

    @classmethod
    def from_dict(cls, dikt) -> 'GnbrEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gnbrEntity of this GnbrEntity.  # noqa: E501
        :rtype: GnbrEntity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self) -> str:
        """Gets the entity_id of this GnbrEntity.


        :return: The entity_id of this GnbrEntity.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id: str):
        """Sets the entity_id of this GnbrEntity.


        :param entity_id: The entity_id of this GnbrEntity.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def synonyms(self) -> List[str]:
        """Gets the synonyms of this GnbrEntity.


        :return: The synonyms of this GnbrEntity.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms: List[str]):
        """Sets the synonyms of this GnbrEntity.


        :param synonyms: The synonyms of this GnbrEntity.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def entity_type(self) -> str:
        """Gets the entity_type of this GnbrEntity.


        :return: The entity_type of this GnbrEntity.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type: str):
        """Sets the entity_type of this GnbrEntity.


        :param entity_type: The entity_type of this GnbrEntity.
        :type entity_type: str
        """

        self._entity_type = entity_type
