# coding: utf-8

"""
    GNBR

    This API provides access to the relationships between entities in the global network of biomedical relationships (GNBR) derived from text  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: alavertu@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DevelopersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_edge(self, entity1, entity2, **kwargs):  # noqa: E501
        """Query for an edge  # noqa: E501

        Query for edges connecting two entities within GNBR  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_edge(entity1, entity2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity1: GNBR-ID for first entity (required)
        :param str entity2: GNBR-ID for second entity (required)
        :return: GnbrEdge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_edge_with_http_info(entity1, entity2, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_with_http_info(entity1, entity2, **kwargs)  # noqa: E501
            return data

    def get_edge_with_http_info(self, entity1, entity2, **kwargs):  # noqa: E501
        """Query for an edge  # noqa: E501

        Query for edges connecting two entities within GNBR  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_edge_with_http_info(entity1, entity2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity1: GNBR-ID for first entity (required)
        :param str entity2: GNBR-ID for second entity (required)
        :return: GnbrEdge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity1', 'entity2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity1' is set
        if ('entity1' not in params or
                params['entity1'] is None):
            raise ValueError("Missing the required parameter `entity1` when calling `get_edge`")  # noqa: E501
        # verify the required parameter 'entity2' is set
        if ('entity2' not in params or
                params['entity2'] is None):
            raise ValueError("Missing the required parameter `entity2` when calling `get_edge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entity1' in params:
            query_params.append(('entity1', params['entity1']))  # noqa: E501
        if 'entity2' in params:
            query_params.append(('entity2', params['entity2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/queryEdge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GnbrEdge',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_identifier(self, search_string, **kwargs):  # noqa: E501
        """Find GNBR identifier  # noqa: E501

        Searches entities within GNBR for a matching ID, based on input string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_identifier(search_string, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_string: pass a search string to find matching identifiers (required)
        :param int limit: maximum number of records to return
        :return: IdMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_identifier_with_http_info(search_string, **kwargs)  # noqa: E501
        else:
            (data) = self.get_identifier_with_http_info(search_string, **kwargs)  # noqa: E501
            return data

    def get_identifier_with_http_info(self, search_string, **kwargs):  # noqa: E501
        """Find GNBR identifier  # noqa: E501

        Searches entities within GNBR for a matching ID, based on input string  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_identifier_with_http_info(search_string, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_string: pass a search string to find matching identifiers (required)
        :param int limit: maximum number of records to return
        :return: IdMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_string', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_string' is set
        if ('search_string' not in params or
                params['search_string'] is None):
            raise ValueError("Missing the required parameter `search_string` when calling `get_identifier`")  # noqa: E501

        if 'limit' in params and params['limit'] > 10:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_identifier`, must be a value less than or equal to `10`")  # noqa: E501
        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_identifier`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_string' in params:
            query_params.append(('searchString', params['search_string']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/findEntity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdMapping',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_neighbors(self, entity1, **kwargs):  # noqa: E501
        """Get all neighbors of a particular node  # noqa: E501

        Query node to get all nodes connected by at least one edge to the input node within GNBR  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_node_neighbors(entity1, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity1: GNBR-ID for first entity (required)
        :return: GnbrSubgraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_node_neighbors_with_http_info(entity1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_node_neighbors_with_http_info(entity1, **kwargs)  # noqa: E501
            return data

    def get_node_neighbors_with_http_info(self, entity1, **kwargs):  # noqa: E501
        """Get all neighbors of a particular node  # noqa: E501

        Query node to get all nodes connected by at least one edge to the input node within GNBR  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_node_neighbors_with_http_info(entity1, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity1: GNBR-ID for first entity (required)
        :return: GnbrSubgraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity1']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_neighbors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity1' is set
        if ('entity1' not in params or
                params['entity1'] is None):
            raise ValueError("Missing the required parameter `entity1` when calling `get_node_neighbors`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entity1' in params:
            query_params.append(('entity1', params['entity1']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getNodeNeighbors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GnbrSubgraph',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subgraph(self, seed_nodes, **kwargs):  # noqa: E501
        """Get a GNBR subgraph  # noqa: E501

        Query a list of nodes to get the GNBR subgraph induced by those nodes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subgraph(seed_nodes, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] seed_nodes: gnbrIDs for subgraph (required)
        :return: GnbrSubgraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_subgraph_with_http_info(seed_nodes, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subgraph_with_http_info(seed_nodes, **kwargs)  # noqa: E501
            return data

    def get_subgraph_with_http_info(self, seed_nodes, **kwargs):  # noqa: E501
        """Get a GNBR subgraph  # noqa: E501

        Query a list of nodes to get the GNBR subgraph induced by those nodes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subgraph_with_http_info(seed_nodes, async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] seed_nodes: gnbrIDs for subgraph (required)
        :return: GnbrSubgraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['seed_nodes']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'seed_nodes' is set
        if ('seed_nodes' not in params or
                params['seed_nodes'] is None):
            raise ValueError("Missing the required parameter `seed_nodes` when calling `get_subgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'seed_nodes' in params:
            query_params.append(('seedNodes', params['seed_nodes']))  # noqa: E501
            collection_formats['seedNodes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getInducedSubgraph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GnbrSubgraph',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
