# coding: utf-8

"""
    GNBR

    This API provides access to the relationships between entities in the global network of biomedical relationships (GNBR) derived from text  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: alavertu@stanford.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.gnbr_entity import GnbrEntity  # noqa: F401,E501


class IdMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_name': 'str',
        'gnbr_entity': 'GnbrEntity',
        'is_medic': 'bool'
    }

    attribute_map = {
        'common_name': 'common_name',
        'gnbr_entity': 'GNBR_entity',
        'is_medic': 'is_medic'
    }

    def __init__(self, common_name=None, gnbr_entity=None, is_medic=None):  # noqa: E501
        """IdMapping - a model defined in Swagger"""  # noqa: E501

        self._common_name = None
        self._gnbr_entity = None
        self._is_medic = None
        self.discriminator = None

        self.common_name = common_name
        if gnbr_entity is not None:
            self.gnbr_entity = gnbr_entity
        self.is_medic = is_medic

    @property
    def common_name(self):
        """Gets the common_name of this IdMapping.  # noqa: E501


        :return: The common_name of this IdMapping.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this IdMapping.


        :param common_name: The common_name of this IdMapping.  # noqa: E501
        :type: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def gnbr_entity(self):
        """Gets the gnbr_entity of this IdMapping.  # noqa: E501


        :return: The gnbr_entity of this IdMapping.  # noqa: E501
        :rtype: GnbrEntity
        """
        return self._gnbr_entity

    @gnbr_entity.setter
    def gnbr_entity(self, gnbr_entity):
        """Sets the gnbr_entity of this IdMapping.


        :param gnbr_entity: The gnbr_entity of this IdMapping.  # noqa: E501
        :type: GnbrEntity
        """

        self._gnbr_entity = gnbr_entity

    @property
    def is_medic(self):
        """Gets the is_medic of this IdMapping.  # noqa: E501


        :return: The is_medic of this IdMapping.  # noqa: E501
        :rtype: bool
        """
        return self._is_medic

    @is_medic.setter
    def is_medic(self, is_medic):
        """Sets the is_medic of this IdMapping.


        :param is_medic: The is_medic of this IdMapping.  # noqa: E501
        :type: bool
        """
        if is_medic is None:
            raise ValueError("Invalid value for `is_medic`, must not be `None`")  # noqa: E501

        self._is_medic = is_medic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
