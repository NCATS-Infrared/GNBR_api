# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GnbrEdge(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, edge_type: str=None, edge_label: str=None, edge_score: float=None, sentence: str=None, pubmed_id: str=None):  # noqa: E501
        """GnbrEdge - a model defined in Swagger

        :param edge_type: The edge_type of this GnbrEdge.  # noqa: E501
        :type edge_type: str
        :param edge_label: The edge_label of this GnbrEdge.  # noqa: E501
        :type edge_label: str
        :param edge_score: The edge_score of this GnbrEdge.  # noqa: E501
        :type edge_score: float
        :param sentence: The sentence of this GnbrEdge.  # noqa: E501
        :type sentence: str
        :param pubmed_id: The pubmed_id of this GnbrEdge.  # noqa: E501
        :type pubmed_id: str
        """
        self.swagger_types = {
            'edge_type': str,
            'edge_label': str,
            'edge_score': float,
            'sentence': str,
            'pubmed_id': str
        }

        self.attribute_map = {
            'edge_type': 'edge_type',
            'edge_label': 'edge_label',
            'edge_score': 'edge_score',
            'sentence': 'sentence',
            'pubmed_id': 'pubmed_id'
        }

        self._edge_type = edge_type
        self._edge_label = edge_label
        self._edge_score = edge_score
        self._sentence = sentence
        self._pubmed_id = pubmed_id

    @classmethod
    def from_dict(cls, dikt) -> 'GnbrEdge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gnbrEdge of this GnbrEdge.  # noqa: E501
        :rtype: GnbrEdge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edge_type(self) -> str:
        """Gets the edge_type of this GnbrEdge.


        :return: The edge_type of this GnbrEdge.
        :rtype: str
        """
        return self._edge_type

    @edge_type.setter
    def edge_type(self, edge_type: str):
        """Sets the edge_type of this GnbrEdge.


        :param edge_type: The edge_type of this GnbrEdge.
        :type edge_type: str
        """
        if edge_type is None:
            raise ValueError("Invalid value for `edge_type`, must not be `None`")  # noqa: E501

        self._edge_type = edge_type

    @property
    def edge_label(self) -> str:
        """Gets the edge_label of this GnbrEdge.


        :return: The edge_label of this GnbrEdge.
        :rtype: str
        """
        return self._edge_label

    @edge_label.setter
    def edge_label(self, edge_label: str):
        """Sets the edge_label of this GnbrEdge.


        :param edge_label: The edge_label of this GnbrEdge.
        :type edge_label: str
        """

        self._edge_label = edge_label

    @property
    def edge_score(self) -> float:
        """Gets the edge_score of this GnbrEdge.


        :return: The edge_score of this GnbrEdge.
        :rtype: float
        """
        return self._edge_score

    @edge_score.setter
    def edge_score(self, edge_score: float):
        """Sets the edge_score of this GnbrEdge.


        :param edge_score: The edge_score of this GnbrEdge.
        :type edge_score: float
        """
        if edge_score is None:
            raise ValueError("Invalid value for `edge_score`, must not be `None`")  # noqa: E501

        self._edge_score = edge_score

    @property
    def sentence(self) -> str:
        """Gets the sentence of this GnbrEdge.


        :return: The sentence of this GnbrEdge.
        :rtype: str
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence: str):
        """Sets the sentence of this GnbrEdge.


        :param sentence: The sentence of this GnbrEdge.
        :type sentence: str
        """
        if sentence is None:
            raise ValueError("Invalid value for `sentence`, must not be `None`")  # noqa: E501

        self._sentence = sentence

    @property
    def pubmed_id(self) -> str:
        """Gets the pubmed_id of this GnbrEdge.


        :return: The pubmed_id of this GnbrEdge.
        :rtype: str
        """
        return self._pubmed_id

    @pubmed_id.setter
    def pubmed_id(self, pubmed_id: str):
        """Sets the pubmed_id of this GnbrEdge.


        :param pubmed_id: The pubmed_id of this GnbrEdge.
        :type pubmed_id: str
        """
        if pubmed_id is None:
            raise ValueError("Invalid value for `pubmed_id`, must not be `None`")  # noqa: E501

        self._pubmed_id = pubmed_id
