# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.gnbr_edge import GnbrEdge  # noqa: F401,E501
from swagger_server import util


class GnbrAssociation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, subject_id: str=None, object_id: str=None, association_score: float=None, associations: List[GnbrEdge]=None):  # noqa: E501
        """GnbrAssociation - a model defined in Swagger

        :param subject_id: The subject_id of this GnbrAssociation.  # noqa: E501
        :type subject_id: str
        :param object_id: The object_id of this GnbrAssociation.  # noqa: E501
        :type object_id: str
        :param association_score: The association_score of this GnbrAssociation.  # noqa: E501
        :type association_score: float
        :param associations: The associations of this GnbrAssociation.  # noqa: E501
        :type associations: List[GnbrEdge]
        """
        self.swagger_types = {
            'subject_id': str,
            'object_id': str,
            'association_score': float,
            'associations': List[GnbrEdge]
        }

        self.attribute_map = {
            'subject_id': 'subject_id',
            'object_id': 'object_id',
            'association_score': 'association_score',
            'associations': 'associations'
        }

        self._subject_id = subject_id
        self._object_id = object_id
        self._association_score = association_score
        self._associations = associations

    @classmethod
    def from_dict(cls, dikt) -> 'GnbrAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gnbrAssociation of this GnbrAssociation.  # noqa: E501
        :rtype: GnbrAssociation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject_id(self) -> str:
        """Gets the subject_id of this GnbrAssociation.


        :return: The subject_id of this GnbrAssociation.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id: str):
        """Sets the subject_id of this GnbrAssociation.


        :param subject_id: The subject_id of this GnbrAssociation.
        :type subject_id: str
        """
        if subject_id is None:
            raise ValueError("Invalid value for `subject_id`, must not be `None`")  # noqa: E501

        self._subject_id = subject_id

    @property
    def object_id(self) -> str:
        """Gets the object_id of this GnbrAssociation.


        :return: The object_id of this GnbrAssociation.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id: str):
        """Sets the object_id of this GnbrAssociation.


        :param object_id: The object_id of this GnbrAssociation.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def association_score(self) -> float:
        """Gets the association_score of this GnbrAssociation.


        :return: The association_score of this GnbrAssociation.
        :rtype: float
        """
        return self._association_score

    @association_score.setter
    def association_score(self, association_score: float):
        """Sets the association_score of this GnbrAssociation.


        :param association_score: The association_score of this GnbrAssociation.
        :type association_score: float
        """
        if association_score is None:
            raise ValueError("Invalid value for `association_score`, must not be `None`")  # noqa: E501

        self._association_score = association_score

    @property
    def associations(self) -> List[GnbrEdge]:
        """Gets the associations of this GnbrAssociation.


        :return: The associations of this GnbrAssociation.
        :rtype: List[GnbrEdge]
        """
        return self._associations

    @associations.setter
    def associations(self, associations: List[GnbrEdge]):
        """Sets the associations of this GnbrAssociation.


        :param associations: The associations of this GnbrAssociation.
        :type associations: List[GnbrEdge]
        """
        if associations is None:
            raise ValueError("Invalid value for `associations`, must not be `None`")  # noqa: E501

        self._associations = associations
