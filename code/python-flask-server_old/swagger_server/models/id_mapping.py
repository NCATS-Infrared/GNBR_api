# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.gnbr_entity import GnbrEntity  # noqa: F401,E501
from swagger_server import util


class IdMapping(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, common_name: str=None, gnbr_entity: GnbrEntity=None, is_medic: bool=None):  # noqa: E501
        """IdMapping - a model defined in Swagger

        :param common_name: The common_name of this IdMapping.  # noqa: E501
        :type common_name: str
        :param gnbr_entity: The gnbr_entity of this IdMapping.  # noqa: E501
        :type gnbr_entity: GnbrEntity
        :param is_medic: The is_medic of this IdMapping.  # noqa: E501
        :type is_medic: bool
        """
        self.swagger_types = {
            'common_name': str,
            'gnbr_entity': GnbrEntity,
            'is_medic': bool
        }

        self.attribute_map = {
            'common_name': 'common_name',
            'gnbr_entity': 'GNBR_entity',
            'is_medic': 'is_medic'
        }

        self._common_name = common_name
        self._gnbr_entity = gnbr_entity
        self._is_medic = is_medic

    @classmethod
    def from_dict(cls, dikt) -> 'IdMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The idMapping of this IdMapping.  # noqa: E501
        :rtype: IdMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_name(self) -> str:
        """Gets the common_name of this IdMapping.


        :return: The common_name of this IdMapping.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name: str):
        """Sets the common_name of this IdMapping.


        :param common_name: The common_name of this IdMapping.
        :type common_name: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def gnbr_entity(self) -> GnbrEntity:
        """Gets the gnbr_entity of this IdMapping.


        :return: The gnbr_entity of this IdMapping.
        :rtype: GnbrEntity
        """
        return self._gnbr_entity

    @gnbr_entity.setter
    def gnbr_entity(self, gnbr_entity: GnbrEntity):
        """Sets the gnbr_entity of this IdMapping.


        :param gnbr_entity: The gnbr_entity of this IdMapping.
        :type gnbr_entity: GnbrEntity
        """

        self._gnbr_entity = gnbr_entity

    @property
    def is_medic(self) -> bool:
        """Gets the is_medic of this IdMapping.


        :return: The is_medic of this IdMapping.
        :rtype: bool
        """
        return self._is_medic

    @is_medic.setter
    def is_medic(self, is_medic: bool):
        """Sets the is_medic of this IdMapping.


        :param is_medic: The is_medic of this IdMapping.
        :type is_medic: bool
        """
        if is_medic is None:
            raise ValueError("Invalid value for `is_medic`, must not be `None`")  # noqa: E501

        self._is_medic = is_medic
