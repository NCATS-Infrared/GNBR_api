# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.gnbr_association import GnbrAssociation  # noqa: F401,E501
from swagger_server import util


class GnbrSubgraph(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, entity_ids: List[str]=None, subgraph: List[GnbrAssociation]=None):  # noqa: E501
        """GnbrSubgraph - a model defined in Swagger

        :param entity_ids: The entity_ids of this GnbrSubgraph.  # noqa: E501
        :type entity_ids: List[str]
        :param subgraph: The subgraph of this GnbrSubgraph.  # noqa: E501
        :type subgraph: List[GnbrAssociation]
        """
        self.swagger_types = {
            'entity_ids': List[str],
            'subgraph': List[GnbrAssociation]
        }

        self.attribute_map = {
            'entity_ids': 'entity_ids',
            'subgraph': 'subgraph'
        }

        self._entity_ids = entity_ids
        self._subgraph = subgraph

    @classmethod
    def from_dict(cls, dikt) -> 'GnbrSubgraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gnbrSubgraph of this GnbrSubgraph.  # noqa: E501
        :rtype: GnbrSubgraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_ids(self) -> List[str]:
        """Gets the entity_ids of this GnbrSubgraph.


        :return: The entity_ids of this GnbrSubgraph.
        :rtype: List[str]
        """
        return self._entity_ids

    @entity_ids.setter
    def entity_ids(self, entity_ids: List[str]):
        """Sets the entity_ids of this GnbrSubgraph.


        :param entity_ids: The entity_ids of this GnbrSubgraph.
        :type entity_ids: List[str]
        """
        if entity_ids is None:
            raise ValueError("Invalid value for `entity_ids`, must not be `None`")  # noqa: E501

        self._entity_ids = entity_ids

    @property
    def subgraph(self) -> List[GnbrAssociation]:
        """Gets the subgraph of this GnbrSubgraph.


        :return: The subgraph of this GnbrSubgraph.
        :rtype: List[GnbrAssociation]
        """
        return self._subgraph

    @subgraph.setter
    def subgraph(self, subgraph: List[GnbrAssociation]):
        """Sets the subgraph of this GnbrSubgraph.


        :param subgraph: The subgraph of this GnbrSubgraph.
        :type subgraph: List[GnbrAssociation]
        """
        if subgraph is None:
            raise ValueError("Invalid value for `subgraph`, must not be `None`")  # noqa: E501

        self._subgraph = subgraph
